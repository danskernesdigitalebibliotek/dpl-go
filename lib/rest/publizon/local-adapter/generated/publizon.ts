/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Publizon Library API
 * Pubhub exists in two separate environments, each with their own server, code and database. Please use the web service located at library-api.qa.pubhub.dk when developing and testing.
Orders/loans created in test environment will not be invoiced. Please request a new license key for the production environment when you're ready to go live.
 * OpenAPI spec version: 1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResult,
  ChecklistResult,
  CreateLoanResult,
  FriendlyCardResult,
  GetV1UserLoansLocalAdapterParams,
  LibraryProfile,
  LoanListResult,
  LoanResult,
  LoanStatusListResult,
  LoanStatusResult,
  PostV1UserLoansIdentifierLocalAdapterParams,
  ProductListResult,
  ProductResult,
  ReservationInput,
  ReservationListResult
} from './model'
import { fetcher } from '../mutator/fetcher';
import type { ErrorType, BodyType } from '../mutator/fetcher';



/**
 * Sample **request**:
            
    GET /friendly
    {
        "name": "Some name"
    }
 * @summary Gets the user's friendly card number.
 */
export const getV1UserCardnumberFriendlyLocalAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<FriendlyCardResult[]>(
      {url: `/v1/user/cardnumber/friendly`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1UserCardnumberFriendlyLocalAdapterQueryKey = () => {
    return [`/v1/user/cardnumber/friendly`] as const;
    }

    
export const getGetV1UserCardnumberFriendlyLocalAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError = ErrorType<ApiResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserCardnumberFriendlyLocalAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>> = ({ signal }) => getV1UserCardnumberFriendlyLocalAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserCardnumberFriendlyLocalAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>>
export type GetV1UserCardnumberFriendlyLocalAdapterQueryError = ErrorType<ApiResult>


export function useGetV1UserCardnumberFriendlyLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError = ErrorType<ApiResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserCardnumberFriendlyLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError = ErrorType<ApiResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserCardnumberFriendlyLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError = ErrorType<ApiResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Gets the user's friendly card number.
 */

export function useGetV1UserCardnumberFriendlyLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError = ErrorType<ApiResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserCardnumberFriendlyLocalAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all checklist items of the user.
 */
export const getV1UserChecklistLocalAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<ChecklistResult>(
      {url: `/v1/user/checklist`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1UserChecklistLocalAdapterQueryKey = () => {
    return [`/v1/user/checklist`] as const;
    }

    
export const getGetV1UserChecklistLocalAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserChecklistLocalAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>> = ({ signal }) => getV1UserChecklistLocalAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserChecklistLocalAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>>
export type GetV1UserChecklistLocalAdapterQueryError = ErrorType<unknown>


export function useGetV1UserChecklistLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserChecklistLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserChecklistLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary List all checklist items of the user.
 */

export function useGetV1UserChecklistLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserChecklistLocalAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a book to the user's checklist.
 */
export const postV1UserChecklistIdentifierLocalAdapter = (
    identifier: string,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/checklist/${identifier}`, method: 'POST'
    },
      );
    }
  


export const getPostV1UserChecklistIdentifierLocalAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserChecklistIdentifierLocalAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postV1UserChecklistIdentifierLocalAdapter>>, TError,{identifier: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1UserChecklistIdentifierLocalAdapter>>, {identifier: string}> = (props) => {
          const {identifier} = props ?? {};

          return  postV1UserChecklistIdentifierLocalAdapter(identifier,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostV1UserChecklistIdentifierLocalAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof postV1UserChecklistIdentifierLocalAdapter>>>
    
    export type PostV1UserChecklistIdentifierLocalAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Add a book to the user's checklist.
 */
export const usePostV1UserChecklistIdentifierLocalAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserChecklistIdentifierLocalAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postV1UserChecklistIdentifierLocalAdapter>>,
        TError,
        {identifier: string},
        TContext
      > => {

      const mutationOptions = getPostV1UserChecklistIdentifierLocalAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a book from the user's checklist.
 */
export const deleteV1UserChecklistIdentifierLocalAdapter = (
    identifier: string,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/checklist/${identifier}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteV1UserChecklistIdentifierLocalAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierLocalAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierLocalAdapter>>, TError,{identifier: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierLocalAdapter>>, {identifier: string}> = (props) => {
          const {identifier} = props ?? {};

          return  deleteV1UserChecklistIdentifierLocalAdapter(identifier,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteV1UserChecklistIdentifierLocalAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierLocalAdapter>>>
    
    export type DeleteV1UserChecklistIdentifierLocalAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Delete a book from the user's checklist.
 */
export const useDeleteV1UserChecklistIdentifierLocalAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierLocalAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierLocalAdapter>>,
        TError,
        {identifier: string},
        TContext
      > => {

      const mutationOptions = getDeleteV1UserChecklistIdentifierLocalAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getV1LibraryProfileLocalAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<LibraryProfile>(
      {url: `/v1/library/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1LibraryProfileLocalAdapterQueryKey = () => {
    return [`/v1/library/profile`] as const;
    }

    
export const getGetV1LibraryProfileLocalAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1LibraryProfileLocalAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>> = ({ signal }) => getV1LibraryProfileLocalAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1LibraryProfileLocalAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>>
export type GetV1LibraryProfileLocalAdapterQueryError = ErrorType<unknown>


export function useGetV1LibraryProfileLocalAdapter<TData = Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1LibraryProfileLocalAdapter<TData = Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1LibraryProfileLocalAdapter<TData = Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetV1LibraryProfileLocalAdapter<TData = Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1LibraryProfileLocalAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Lists all active loans of the user.
 */
export const getV1UserLoansLocalAdapter = (
    params?: GetV1UserLoansLocalAdapterParams,
 signal?: AbortSignal
) => {
      
      
      return fetcher<LoanListResult>(
      {url: `/v1/user/loans`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetV1UserLoansLocalAdapterQueryKey = (params?: GetV1UserLoansLocalAdapterParams,) => {
    return [`/v1/user/loans`, ...(params ? [params]: [])] as const;
    }

    
export const getGetV1UserLoansLocalAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError = ErrorType<unknown>>(params?: GetV1UserLoansLocalAdapterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserLoansLocalAdapterQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>> = ({ signal }) => getV1UserLoansLocalAdapter(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserLoansLocalAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>>
export type GetV1UserLoansLocalAdapterQueryError = ErrorType<unknown>


export function useGetV1UserLoansLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError = ErrorType<unknown>>(
 params: undefined |  GetV1UserLoansLocalAdapterParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserLoansLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError = ErrorType<unknown>>(
 params?: GetV1UserLoansLocalAdapterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserLoansLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError = ErrorType<unknown>>(
 params?: GetV1UserLoansLocalAdapterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Lists all active loans of the user.
 */

export function useGetV1UserLoansLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError = ErrorType<unknown>>(
 params?: GetV1UserLoansLocalAdapterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserLoansLocalAdapterQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Gets details of a specific loan.
 */
export const getV1UserLoansIdentifierLocalAdapter = (
    identifier: string,
 signal?: AbortSignal
) => {
      
      
      return fetcher<LoanResult>(
      {url: `/v1/user/loans/${identifier}`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1UserLoansIdentifierLocalAdapterQueryKey = (identifier: string,) => {
    return [`/v1/user/loans/${identifier}`] as const;
    }

    
export const getGetV1UserLoansIdentifierLocalAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserLoansIdentifierLocalAdapterQueryKey(identifier);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>> = ({ signal }) => getV1UserLoansIdentifierLocalAdapter(identifier, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserLoansIdentifierLocalAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>>
export type GetV1UserLoansIdentifierLocalAdapterQueryError = ErrorType<unknown>


export function useGetV1UserLoansIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserLoansIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserLoansIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Gets details of a specific loan.
 */

export function useGetV1UserLoansIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserLoansIdentifierLocalAdapterQueryOptions(identifier,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Creates a new loan.
 */
export const postV1UserLoansIdentifierLocalAdapter = (
    identifier: string,
    params?: PostV1UserLoansIdentifierLocalAdapterParams,
 ) => {
      
      
      return fetcher<CreateLoanResult>(
      {url: `/v1/user/loans/${identifier}`, method: 'POST',
        params
    },
      );
    }
  


export const getPostV1UserLoansIdentifierLocalAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserLoansIdentifierLocalAdapter>>, TError,{identifier: string;params?: PostV1UserLoansIdentifierLocalAdapterParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postV1UserLoansIdentifierLocalAdapter>>, TError,{identifier: string;params?: PostV1UserLoansIdentifierLocalAdapterParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1UserLoansIdentifierLocalAdapter>>, {identifier: string;params?: PostV1UserLoansIdentifierLocalAdapterParams}> = (props) => {
          const {identifier,params} = props ?? {};

          return  postV1UserLoansIdentifierLocalAdapter(identifier,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostV1UserLoansIdentifierLocalAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof postV1UserLoansIdentifierLocalAdapter>>>
    
    export type PostV1UserLoansIdentifierLocalAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Creates a new loan.
 */
export const usePostV1UserLoansIdentifierLocalAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserLoansIdentifierLocalAdapter>>, TError,{identifier: string;params?: PostV1UserLoansIdentifierLocalAdapterParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postV1UserLoansIdentifierLocalAdapter>>,
        TError,
        {identifier: string;params?: PostV1UserLoansIdentifierLocalAdapterParams},
        TContext
      > => {

      const mutationOptions = getPostV1UserLoansIdentifierLocalAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get loan status of a specific product.
 */
export const getV1LoanstatusIdentifierLocalAdapter = (
    identifier: string,
 signal?: AbortSignal
) => {
      
      
      return fetcher<LoanStatusResult>(
      {url: `/v1/loanstatus/${identifier}`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1LoanstatusIdentifierLocalAdapterQueryKey = (identifier: string,) => {
    return [`/v1/loanstatus/${identifier}`] as const;
    }

    
export const getGetV1LoanstatusIdentifierLocalAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1LoanstatusIdentifierLocalAdapterQueryKey(identifier);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>> = ({ signal }) => getV1LoanstatusIdentifierLocalAdapter(identifier, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1LoanstatusIdentifierLocalAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>>
export type GetV1LoanstatusIdentifierLocalAdapterQueryError = ErrorType<unknown>


export function useGetV1LoanstatusIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1LoanstatusIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1LoanstatusIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get loan status of a specific product.
 */

export function useGetV1LoanstatusIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1LoanstatusIdentifierLocalAdapterQueryOptions(identifier,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get loan status of all products.
 */
export const postV1LoanstatusLocalAdapter = (
    postV1LoanstatusLocalAdapterBody: BodyType<string[]>,
 ) => {
      
      
      return fetcher<LoanStatusListResult>(
      {url: `/v1/loanstatus`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postV1LoanstatusLocalAdapterBody
    },
      );
    }
  


export const getPostV1LoanstatusLocalAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1LoanstatusLocalAdapter>>, TError,{data: BodyType<string[]>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postV1LoanstatusLocalAdapter>>, TError,{data: BodyType<string[]>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1LoanstatusLocalAdapter>>, {data: BodyType<string[]>}> = (props) => {
          const {data} = props ?? {};

          return  postV1LoanstatusLocalAdapter(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostV1LoanstatusLocalAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof postV1LoanstatusLocalAdapter>>>
    export type PostV1LoanstatusLocalAdapterMutationBody = BodyType<string[]>
    export type PostV1LoanstatusLocalAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Get loan status of all products.
 */
export const usePostV1LoanstatusLocalAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1LoanstatusLocalAdapter>>, TError,{data: BodyType<string[]>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postV1LoanstatusLocalAdapter>>,
        TError,
        {data: BodyType<string[]>},
        TContext
      > => {

      const mutationOptions = getPostV1LoanstatusLocalAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a specific product.
 */
export const getV1ProductsIdentifierLocalAdapter = (
    identifier: string,
 signal?: AbortSignal
) => {
      
      
      return fetcher<ProductResult>(
      {url: `/v1/products/${identifier}`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1ProductsIdentifierLocalAdapterQueryKey = (identifier: string,) => {
    return [`/v1/products/${identifier}`] as const;
    }

    
export const getGetV1ProductsIdentifierLocalAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1ProductsIdentifierLocalAdapterQueryKey(identifier);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>> = ({ signal }) => getV1ProductsIdentifierLocalAdapter(identifier, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1ProductsIdentifierLocalAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>>
export type GetV1ProductsIdentifierLocalAdapterQueryError = ErrorType<unknown>


export function useGetV1ProductsIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1ProductsIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1ProductsIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get a specific product.
 */

export function useGetV1ProductsIdentifierLocalAdapter<TData = Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1ProductsIdentifierLocalAdapterQueryOptions(identifier,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all products.
 */
export const getV1ProductsLocalAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<ProductListResult>(
      {url: `/v1/products`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1ProductsLocalAdapterQueryKey = () => {
    return [`/v1/products`] as const;
    }

    
export const getGetV1ProductsLocalAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1ProductsLocalAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>> = ({ signal }) => getV1ProductsLocalAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1ProductsLocalAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>>
export type GetV1ProductsLocalAdapterQueryError = ErrorType<unknown>


export function useGetV1ProductsLocalAdapter<TData = Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1ProductsLocalAdapter<TData = Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1ProductsLocalAdapter<TData = Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary List all products.
 */

export function useGetV1ProductsLocalAdapter<TData = Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1ProductsLocalAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Lists all reservations of the user.
 */
export const getV1UserReservationsLocalAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<ReservationListResult>(
      {url: `/v1/user/reservations`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1UserReservationsLocalAdapterQueryKey = () => {
    return [`/v1/user/reservations`] as const;
    }

    
export const getGetV1UserReservationsLocalAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserReservationsLocalAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>> = ({ signal }) => getV1UserReservationsLocalAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserReservationsLocalAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>>
export type GetV1UserReservationsLocalAdapterQueryError = ErrorType<unknown>


export function useGetV1UserReservationsLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserReservationsLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserReservationsLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Lists all reservations of the user.
 */

export function useGetV1UserReservationsLocalAdapter<TData = Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsLocalAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserReservationsLocalAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Creates a new reservation.
 */
export const postV1UserReservationsIdentifierLocalAdapter = (
    identifier: string,
    reservationInput: BodyType<ReservationInput>,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/reservations/${identifier}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reservationInput
    },
      );
    }
  


export const getPostV1UserReservationsIdentifierLocalAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserReservationsIdentifierLocalAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postV1UserReservationsIdentifierLocalAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1UserReservationsIdentifierLocalAdapter>>, {identifier: string;data: BodyType<ReservationInput>}> = (props) => {
          const {identifier,data} = props ?? {};

          return  postV1UserReservationsIdentifierLocalAdapter(identifier,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostV1UserReservationsIdentifierLocalAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof postV1UserReservationsIdentifierLocalAdapter>>>
    export type PostV1UserReservationsIdentifierLocalAdapterMutationBody = BodyType<ReservationInput>
    export type PostV1UserReservationsIdentifierLocalAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Creates a new reservation.
 */
export const usePostV1UserReservationsIdentifierLocalAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserReservationsIdentifierLocalAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postV1UserReservationsIdentifierLocalAdapter>>,
        TError,
        {identifier: string;data: BodyType<ReservationInput>},
        TContext
      > => {

      const mutationOptions = getPostV1UserReservationsIdentifierLocalAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Updates the phone number and email address of a specific reservation.
 */
export const patchV1UserReservationsIdentifierLocalAdapter = (
    identifier: string,
    reservationInput: BodyType<ReservationInput>,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/reservations/${identifier}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: reservationInput
    },
      );
    }
  


export const getPatchV1UserReservationsIdentifierLocalAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierLocalAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierLocalAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierLocalAdapter>>, {identifier: string;data: BodyType<ReservationInput>}> = (props) => {
          const {identifier,data} = props ?? {};

          return  patchV1UserReservationsIdentifierLocalAdapter(identifier,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchV1UserReservationsIdentifierLocalAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierLocalAdapter>>>
    export type PatchV1UserReservationsIdentifierLocalAdapterMutationBody = BodyType<ReservationInput>
    export type PatchV1UserReservationsIdentifierLocalAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Updates the phone number and email address of a specific reservation.
 */
export const usePatchV1UserReservationsIdentifierLocalAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierLocalAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof patchV1UserReservationsIdentifierLocalAdapter>>,
        TError,
        {identifier: string;data: BodyType<ReservationInput>},
        TContext
      > => {

      const mutationOptions = getPatchV1UserReservationsIdentifierLocalAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancels a reservation.
 */
export const deleteV1UserReservationsIdentifierLocalAdapter = (
    identifier: string,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/reservations/${identifier}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteV1UserReservationsIdentifierLocalAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierLocalAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierLocalAdapter>>, TError,{identifier: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierLocalAdapter>>, {identifier: string}> = (props) => {
          const {identifier} = props ?? {};

          return  deleteV1UserReservationsIdentifierLocalAdapter(identifier,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteV1UserReservationsIdentifierLocalAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierLocalAdapter>>>
    
    export type DeleteV1UserReservationsIdentifierLocalAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Cancels a reservation.
 */
export const useDeleteV1UserReservationsIdentifierLocalAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierLocalAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierLocalAdapter>>,
        TError,
        {identifier: string},
        TContext
      > => {

      const mutationOptions = getDeleteV1UserReservationsIdentifierLocalAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
