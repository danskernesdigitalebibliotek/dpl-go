/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Publizon Library API
 * Pubhub exists in two separate environments, each with their own server, code and database. Please use the web service located at library-api.qa.pubhub.dk when developing and testing.
Orders/loans created in test environment will not be invoiced. Please request a new license key for the production environment when you're ready to go live.
 * OpenAPI spec version: 1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResult,
  ChecklistResult,
  CreateLoanResult,
  FriendlyCardResult,
  GetV1UserLoansAdapterParams,
  LibraryProfile,
  LoanListResult,
  LoanResult,
  LoanStatusListResult,
  LoanStatusResult,
  PostV1UserLoansIdentifierAdapterParams,
  ProductListResult,
  ProductResult,
  ReservationInput,
  ReservationListResult
} from './model'
import { fetcher } from '../mutator/fetcher';
import type { ErrorType, BodyType } from '../mutator/fetcher';



/**
 * Sample **request**:
            
    GET /friendly
    {
        "name": "Some name"
    }
 * @summary Gets the user's friendly card number.
 */
export const getV1UserCardnumberFriendlyAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<FriendlyCardResult[]>(
      {url: `/v1/user/cardnumber/friendly`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1UserCardnumberFriendlyAdapterQueryKey = () => {
    return [`/v1/user/cardnumber/friendly`] as const;
    }

    
export const getGetV1UserCardnumberFriendlyAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError = ErrorType<ApiResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserCardnumberFriendlyAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>> = ({ signal }) => getV1UserCardnumberFriendlyAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserCardnumberFriendlyAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>>
export type GetV1UserCardnumberFriendlyAdapterQueryError = ErrorType<ApiResult>


export function useGetV1UserCardnumberFriendlyAdapter<TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError = ErrorType<ApiResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserCardnumberFriendlyAdapter<TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError = ErrorType<ApiResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserCardnumberFriendlyAdapter<TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError = ErrorType<ApiResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Gets the user's friendly card number.
 */

export function useGetV1UserCardnumberFriendlyAdapter<TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError = ErrorType<ApiResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserCardnumberFriendlyAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserCardnumberFriendlyAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all checklist items of the user.
 */
export const getV1UserChecklistAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<ChecklistResult>(
      {url: `/v1/user/checklist`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1UserChecklistAdapterQueryKey = () => {
    return [`/v1/user/checklist`] as const;
    }

    
export const getGetV1UserChecklistAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserChecklistAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserChecklistAdapter>>> = ({ signal }) => getV1UserChecklistAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserChecklistAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserChecklistAdapter>>>
export type GetV1UserChecklistAdapterQueryError = ErrorType<unknown>


export function useGetV1UserChecklistAdapter<TData = Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserChecklistAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserChecklistAdapter<TData = Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserChecklistAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserChecklistAdapter<TData = Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary List all checklist items of the user.
 */

export function useGetV1UserChecklistAdapter<TData = Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserChecklistAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserChecklistAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a book to the user's checklist.
 */
export const postV1UserChecklistIdentifierAdapter = (
    identifier: string,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/checklist/${identifier}`, method: 'POST'
    },
      );
    }
  


export const getPostV1UserChecklistIdentifierAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserChecklistIdentifierAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postV1UserChecklistIdentifierAdapter>>, TError,{identifier: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1UserChecklistIdentifierAdapter>>, {identifier: string}> = (props) => {
          const {identifier} = props ?? {};

          return  postV1UserChecklistIdentifierAdapter(identifier,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostV1UserChecklistIdentifierAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof postV1UserChecklistIdentifierAdapter>>>
    
    export type PostV1UserChecklistIdentifierAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Add a book to the user's checklist.
 */
export const usePostV1UserChecklistIdentifierAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserChecklistIdentifierAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postV1UserChecklistIdentifierAdapter>>,
        TError,
        {identifier: string},
        TContext
      > => {

      const mutationOptions = getPostV1UserChecklistIdentifierAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a book from the user's checklist.
 */
export const deleteV1UserChecklistIdentifierAdapter = (
    identifier: string,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/checklist/${identifier}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteV1UserChecklistIdentifierAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierAdapter>>, TError,{identifier: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierAdapter>>, {identifier: string}> = (props) => {
          const {identifier} = props ?? {};

          return  deleteV1UserChecklistIdentifierAdapter(identifier,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteV1UserChecklistIdentifierAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierAdapter>>>
    
    export type DeleteV1UserChecklistIdentifierAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Delete a book from the user's checklist.
 */
export const useDeleteV1UserChecklistIdentifierAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteV1UserChecklistIdentifierAdapter>>,
        TError,
        {identifier: string},
        TContext
      > => {

      const mutationOptions = getDeleteV1UserChecklistIdentifierAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getV1LibraryProfileAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<LibraryProfile>(
      {url: `/v1/library/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1LibraryProfileAdapterQueryKey = () => {
    return [`/v1/library/profile`] as const;
    }

    
export const getGetV1LibraryProfileAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1LibraryProfileAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>> = ({ signal }) => getV1LibraryProfileAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1LibraryProfileAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>>
export type GetV1LibraryProfileAdapterQueryError = ErrorType<unknown>


export function useGetV1LibraryProfileAdapter<TData = Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1LibraryProfileAdapter<TData = Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1LibraryProfileAdapter<TData = Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetV1LibraryProfileAdapter<TData = Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LibraryProfileAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1LibraryProfileAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Lists all active loans of the user.
 */
export const getV1UserLoansAdapter = (
    params?: GetV1UserLoansAdapterParams,
 signal?: AbortSignal
) => {
      
      
      return fetcher<LoanListResult>(
      {url: `/v1/user/loans`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetV1UserLoansAdapterQueryKey = (params?: GetV1UserLoansAdapterParams,) => {
    return [`/v1/user/loans`, ...(params ? [params]: [])] as const;
    }

    
export const getGetV1UserLoansAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError = ErrorType<unknown>>(params?: GetV1UserLoansAdapterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserLoansAdapterQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserLoansAdapter>>> = ({ signal }) => getV1UserLoansAdapter(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserLoansAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserLoansAdapter>>>
export type GetV1UserLoansAdapterQueryError = ErrorType<unknown>


export function useGetV1UserLoansAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError = ErrorType<unknown>>(
 params: undefined |  GetV1UserLoansAdapterParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserLoansAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserLoansAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError = ErrorType<unknown>>(
 params?: GetV1UserLoansAdapterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserLoansAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserLoansAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError = ErrorType<unknown>>(
 params?: GetV1UserLoansAdapterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Lists all active loans of the user.
 */

export function useGetV1UserLoansAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError = ErrorType<unknown>>(
 params?: GetV1UserLoansAdapterParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserLoansAdapterQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Gets details of a specific loan.
 */
export const getV1UserLoansIdentifierAdapter = (
    identifier: string,
 signal?: AbortSignal
) => {
      
      
      return fetcher<LoanResult>(
      {url: `/v1/user/loans/${identifier}`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1UserLoansIdentifierAdapterQueryKey = (identifier: string,) => {
    return [`/v1/user/loans/${identifier}`] as const;
    }

    
export const getGetV1UserLoansIdentifierAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError = ErrorType<unknown>>(identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserLoansIdentifierAdapterQueryKey(identifier);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>> = ({ signal }) => getV1UserLoansIdentifierAdapter(identifier, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserLoansIdentifierAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>>
export type GetV1UserLoansIdentifierAdapterQueryError = ErrorType<unknown>


export function useGetV1UserLoansIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserLoansIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserLoansIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Gets details of a specific loan.
 */

export function useGetV1UserLoansIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserLoansIdentifierAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserLoansIdentifierAdapterQueryOptions(identifier,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Creates a new loan.
 */
export const postV1UserLoansIdentifierAdapter = (
    identifier: string,
    params?: PostV1UserLoansIdentifierAdapterParams,
 ) => {
      
      
      return fetcher<CreateLoanResult>(
      {url: `/v1/user/loans/${identifier}`, method: 'POST',
        params
    },
      );
    }
  


export const getPostV1UserLoansIdentifierAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserLoansIdentifierAdapter>>, TError,{identifier: string;params?: PostV1UserLoansIdentifierAdapterParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postV1UserLoansIdentifierAdapter>>, TError,{identifier: string;params?: PostV1UserLoansIdentifierAdapterParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1UserLoansIdentifierAdapter>>, {identifier: string;params?: PostV1UserLoansIdentifierAdapterParams}> = (props) => {
          const {identifier,params} = props ?? {};

          return  postV1UserLoansIdentifierAdapter(identifier,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostV1UserLoansIdentifierAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof postV1UserLoansIdentifierAdapter>>>
    
    export type PostV1UserLoansIdentifierAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Creates a new loan.
 */
export const usePostV1UserLoansIdentifierAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserLoansIdentifierAdapter>>, TError,{identifier: string;params?: PostV1UserLoansIdentifierAdapterParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postV1UserLoansIdentifierAdapter>>,
        TError,
        {identifier: string;params?: PostV1UserLoansIdentifierAdapterParams},
        TContext
      > => {

      const mutationOptions = getPostV1UserLoansIdentifierAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get loan status of a specific product.
 */
export const getV1LoanstatusIdentifierAdapter = (
    identifier: string,
 signal?: AbortSignal
) => {
      
      
      return fetcher<LoanStatusResult>(
      {url: `/v1/loanstatus/${identifier}`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1LoanstatusIdentifierAdapterQueryKey = (identifier: string,) => {
    return [`/v1/loanstatus/${identifier}`] as const;
    }

    
export const getGetV1LoanstatusIdentifierAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError = ErrorType<unknown>>(identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1LoanstatusIdentifierAdapterQueryKey(identifier);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>> = ({ signal }) => getV1LoanstatusIdentifierAdapter(identifier, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1LoanstatusIdentifierAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>>
export type GetV1LoanstatusIdentifierAdapterQueryError = ErrorType<unknown>


export function useGetV1LoanstatusIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1LoanstatusIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1LoanstatusIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get loan status of a specific product.
 */

export function useGetV1LoanstatusIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1LoanstatusIdentifierAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1LoanstatusIdentifierAdapterQueryOptions(identifier,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get loan status of all products.
 */
export const postV1LoanstatusAdapter = (
    postV1LoanstatusAdapterBody: BodyType<string[]>,
 ) => {
      
      
      return fetcher<LoanStatusListResult>(
      {url: `/v1/loanstatus`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postV1LoanstatusAdapterBody
    },
      );
    }
  


export const getPostV1LoanstatusAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1LoanstatusAdapter>>, TError,{data: BodyType<string[]>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postV1LoanstatusAdapter>>, TError,{data: BodyType<string[]>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1LoanstatusAdapter>>, {data: BodyType<string[]>}> = (props) => {
          const {data} = props ?? {};

          return  postV1LoanstatusAdapter(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostV1LoanstatusAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof postV1LoanstatusAdapter>>>
    export type PostV1LoanstatusAdapterMutationBody = BodyType<string[]>
    export type PostV1LoanstatusAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Get loan status of all products.
 */
export const usePostV1LoanstatusAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1LoanstatusAdapter>>, TError,{data: BodyType<string[]>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postV1LoanstatusAdapter>>,
        TError,
        {data: BodyType<string[]>},
        TContext
      > => {

      const mutationOptions = getPostV1LoanstatusAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a specific product.
 */
export const getV1ProductsIdentifierAdapter = (
    identifier: string,
 signal?: AbortSignal
) => {
      
      
      return fetcher<ProductResult>(
      {url: `/v1/products/${identifier}`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1ProductsIdentifierAdapterQueryKey = (identifier: string,) => {
    return [`/v1/products/${identifier}`] as const;
    }

    
export const getGetV1ProductsIdentifierAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError = ErrorType<unknown>>(identifier: string, queryOptions?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError, TData>>) => {



  const queryKey =  queryOptions?.queryKey ?? getGetV1ProductsIdentifierAdapterQueryKey(identifier);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>> = ({ signal }) => getV1ProductsIdentifierAdapter(identifier, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1ProductsIdentifierAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>>
export type GetV1ProductsIdentifierAdapterQueryError = ErrorType<unknown>


export function useGetV1ProductsIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, queryOptions: Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>,
          TError,
          TData
        > , 'initialData'
      >
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1ProductsIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, queryOptions?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>,
          TError,
          TData
        > , 'initialData'
      >
  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1ProductsIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, queryOptions?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError, TData>>
  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get a specific product.
 */

export function useGetV1ProductsIdentifierAdapter<TData = Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError = ErrorType<unknown>>(
 identifier: string, queryOptions?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsIdentifierAdapter>>, TError, TData>>
  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const options = getGetV1ProductsIdentifierAdapterQueryOptions(identifier,queryOptions)

  const query = useQuery(options) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = options.queryKey ;

  return query;
}




/**
 * @summary List all products.
 */
export const getV1ProductsAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<ProductListResult>(
      {url: `/v1/products`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1ProductsAdapterQueryKey = () => {
    return [`/v1/products`] as const;
    }

    
export const getGetV1ProductsAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1ProductsAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1ProductsAdapter>>> = ({ signal }) => getV1ProductsAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1ProductsAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1ProductsAdapter>>>
export type GetV1ProductsAdapterQueryError = ErrorType<unknown>


export function useGetV1ProductsAdapter<TData = Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ProductsAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1ProductsAdapter<TData = Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ProductsAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1ProductsAdapter<TData = Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary List all products.
 */

export function useGetV1ProductsAdapter<TData = Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1ProductsAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1ProductsAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Lists all reservations of the user.
 */
export const getV1UserReservationsAdapter = (
    
 signal?: AbortSignal
) => {
      
      
      return fetcher<ReservationListResult>(
      {url: `/v1/user/reservations`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1UserReservationsAdapterQueryKey = () => {
    return [`/v1/user/reservations`] as const;
    }

    
export const getGetV1UserReservationsAdapterQueryOptions = <TData = Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1UserReservationsAdapterQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserReservationsAdapter>>> = ({ signal }) => getV1UserReservationsAdapter(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1UserReservationsAdapterQueryResult = NonNullable<Awaited<ReturnType<typeof getV1UserReservationsAdapter>>>
export type GetV1UserReservationsAdapterQueryError = ErrorType<unknown>


export function useGetV1UserReservationsAdapter<TData = Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserReservationsAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserReservationsAdapter<TData = Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1UserReservationsAdapter>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetV1UserReservationsAdapter<TData = Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Lists all reservations of the user.
 */

export function useGetV1UserReservationsAdapter<TData = Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getV1UserReservationsAdapter>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetV1UserReservationsAdapterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Creates a new reservation.
 */
export const postV1UserReservationsIdentifierAdapter = (
    identifier: string,
    reservationInput: BodyType<ReservationInput>,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/reservations/${identifier}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reservationInput
    },
      );
    }
  


export const getPostV1UserReservationsIdentifierAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserReservationsIdentifierAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postV1UserReservationsIdentifierAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postV1UserReservationsIdentifierAdapter>>, {identifier: string;data: BodyType<ReservationInput>}> = (props) => {
          const {identifier,data} = props ?? {};

          return  postV1UserReservationsIdentifierAdapter(identifier,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostV1UserReservationsIdentifierAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof postV1UserReservationsIdentifierAdapter>>>
    export type PostV1UserReservationsIdentifierAdapterMutationBody = BodyType<ReservationInput>
    export type PostV1UserReservationsIdentifierAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Creates a new reservation.
 */
export const usePostV1UserReservationsIdentifierAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postV1UserReservationsIdentifierAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postV1UserReservationsIdentifierAdapter>>,
        TError,
        {identifier: string;data: BodyType<ReservationInput>},
        TContext
      > => {

      const mutationOptions = getPostV1UserReservationsIdentifierAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Updates the phone number and email address of a specific reservation.
 */
export const patchV1UserReservationsIdentifierAdapter = (
    identifier: string,
    reservationInput: BodyType<ReservationInput>,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/reservations/${identifier}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: reservationInput
    },
      );
    }
  


export const getPatchV1UserReservationsIdentifierAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierAdapter>>, {identifier: string;data: BodyType<ReservationInput>}> = (props) => {
          const {identifier,data} = props ?? {};

          return  patchV1UserReservationsIdentifierAdapter(identifier,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchV1UserReservationsIdentifierAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierAdapter>>>
    export type PatchV1UserReservationsIdentifierAdapterMutationBody = BodyType<ReservationInput>
    export type PatchV1UserReservationsIdentifierAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Updates the phone number and email address of a specific reservation.
 */
export const usePatchV1UserReservationsIdentifierAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchV1UserReservationsIdentifierAdapter>>, TError,{identifier: string;data: BodyType<ReservationInput>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof patchV1UserReservationsIdentifierAdapter>>,
        TError,
        {identifier: string;data: BodyType<ReservationInput>},
        TContext
      > => {

      const mutationOptions = getPatchV1UserReservationsIdentifierAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Cancels a reservation.
 */
export const deleteV1UserReservationsIdentifierAdapter = (
    identifier: string,
 ) => {
      
      
      return fetcher<ApiResult>(
      {url: `/v1/user/reservations/${identifier}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteV1UserReservationsIdentifierAdapterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierAdapter>>, TError,{identifier: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierAdapter>>, {identifier: string}> = (props) => {
          const {identifier} = props ?? {};

          return  deleteV1UserReservationsIdentifierAdapter(identifier,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteV1UserReservationsIdentifierAdapterMutationResult = NonNullable<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierAdapter>>>
    
    export type DeleteV1UserReservationsIdentifierAdapterMutationError = ErrorType<unknown>

    /**
 * @summary Cancels a reservation.
 */
export const useDeleteV1UserReservationsIdentifierAdapter = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierAdapter>>, TError,{identifier: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteV1UserReservationsIdentifierAdapter>>,
        TError,
        {identifier: string},
        TContext
      > => {

      const mutationOptions = getDeleteV1UserReservationsIdentifierAdapterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
